# Blosxom Plugin: expirez
# Author: Stu MacKenzie <http://groups.yahoo.com/group/blosxom/messages>
# Version: v0.59 2005-04-08 (1)
# License: MIT/Public Domain
# expirez home: http://www.enilnomi.net/download.html
# Documentation at the bottom of this file or type: perldoc expirez

package expirez;

# - USAGE - - - - - - - - - - - - - - - - - -
# set an "expiration date" for an entry by
# adding a meta-tag in this format:
# meta-expire_date: YYYY MM DD
# (and so, expirez requires the meta plugin)
#
# expirez uses a cache file to do its business. 
# When you first add an expiration date to an entry 
# file, it is automatically added to the cache file.
# However, the cache file does *not* automatically 
# pick up modified expiration dates from entry files; 
# to get the cache file to recognize modified dates, 
# delete the current cache file ("expiration_dates").
#
# - - - - - - - - - - - - - - - - - - - - - -

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#
#  Configuration Section
#
# = = = = = = = = = = = = = = = =
#
# Expiration Dates file --
#       The plugin uses a cache file of pathnames and dates to determine 
#       which stories are expired.
#
#      What's the complete path to the expiration dates file?
#       (leave empty for automatic configuration using Blosxom's plugins state dir)
my $expiration_dates_file_path = "";

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

use strict;
use Time::Local;

my $time;
my %expired;
my $dirty = 0;

sub start {
  $blosxom::path_info =~ /\./ and return 0;     # don't run if displaying only one story
  $expiration_dates_file_path ||= "$blosxom::plugin_state_dir/expiration_dates";
  $time = time;
  1;
}

sub filter {
  my ($pkg, $files_ref) = @_;
                                                # process the cache file into a hash
  if (open INCACHE, "< $expiration_dates_file_path") {
    my $str;
    while ($str = <INCACHE>) {
      ($str =~ /\s*'?(.*?)'?\s*=>\s*(\d*),?/) and ($expired{$1} = $2);
    }
    close INCACHE;
                                                # we're going to compare the keys of two 
                                                # hashes; to make the loop efficient, the 
                                                # smaller hash is selected for iteration.
    my @ptr_ref = ($files_ref, \%expired, $files_ref);
    my $c = scalar(keys %$files_ref) < scalar(keys %expired) ? 1 : 0;
    my $list_a = $ptr_ref[$c];
    my $list_b = $ptr_ref[$c+1];

    foreach (keys %$list_a) {                   # delete entry file paths that the cache 
      exists $$list_b{$_} and                   # says are expired
        ($expired{$_} < $time) and
          delete $$files_ref{$_};
    }
  }
  1;
}


sub story {
  my ($pkg, $path, $filename, $story_ref, $title_ref, $body_ref) = @_;
  
  $meta::expire_date or return 1;                   # skip entry if no expiration date
  my @date_items = split(' ', $meta::expire_date);  # get the expiration date,
                                                    # and convert it to local time
  my $exp_time = timelocal(0,0,0,$date_items[2],$date_items[1]-1,$date_items[0]);
                                                    # update cache with new expiration date
  $expired{"$blosxom::datadir$path/$filename.$blosxom::file_extension"} ne $exp_time and 
    $expired{"$blosxom::datadir$path/$filename.$blosxom::file_extension"} = $exp_time and 
      $dirty = 1;
  1;
}

sub end {
  $dirty or return 1;                           # only continue if the cache changed
  if (open OUTCACHE, "> $expiration_dates_file_path") {
    foreach (sort keys %expired) {
      print OUTCACHE "$_ => $expired{$_}\n";    # write cache file
    }
  close OUTCACHE;
  }
  1;
}

1;

__END__

=head1 NAME

Blosxom Plug-in: expirez

=head1 SYNOPSIS

To give a story an "expiration date," add this line just below 
the story title: 
meta-expire_date: YYYY MM DD
(and, of course, fill in the date ;-)


=head1 INSTALLATION

Upload or drop the "expirez" file into your blosxom plugins folder. 
Configuration is optional. Blog on.


=head1 CONFIGURATION

With any luck, the instructions in the "Configuration Section" 
at the top of this file are sufficient; if more information is 
needed, see the documentation at:
  http://www.enilnomi.net/dltext/expirez.dl


=head1 USAGE NOTES

When an expiration date is first added to an entry file, expirez 
will automatically cache the file path and date. OTOH, modifying 
an existing expiration date will go unnoticed; to get the plugin 
to recognize a modified (or deleted) expiration date, delete the 
plugin's cache file ("expiration_dates").

If you add an expired expiration date to your blog, the entry 
will not be hidden until blosxom is called twice.


=head1 BUGS

Address bug reports and comments to the Blosxom mailing list:
http://www.yahoogroups.com/group/blosxom


=head1 VERSION

2005-04-08 (v0.59)  - play nice with date templates
2005-03-28 (v0.5)   - it's alive


=head1 LICENSE

this Blosxom Plug-in
Copyright 2005, Stu MacKenzie

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
