# Blosxom Plugin: binary
# Author(s): Raffi Krikorian <r@bitwaste.com>
# Version: 0.0.2
# Documentation: See the bottom of this file or type: perldoc binary

package binary;
use CGI qw/:standard :netscape/;
use File::Copy;
use File::Find;
use FileHandle;
use MIME::Types;

# --------------------------------

sub start {
    my $fh = new FileHandle;
    if( $blosxom::static_or_dynamic eq "dynamic" ) {
	# if Blosxom is being dynamically generated -- then we have to
	# see if the URL requested specifies a file that is on the
	# filesystem, then it will return that file with the right
	# Content-Type header
	if( ( $blosxom::path_info =~ m!^(.*?/)([^/]*?)\.([^\.]*?)$! ) &&
	    ( -e "$blosxom::datadir/$1/$2.$3" ) ) {
	    my $mimetype = MIME::Types->new->mimeTypeOf( $flavour );
	    print 
		header( { -type=>
			      ( $mimetype ) ? 
			      $mimetype->mediaType . "/" . $mimetype->subType :
			      "application/octet-stream" } );
	    print join '', <$fh> if $fh->open( "<$blosxom::datadir/$1/$2.$3" );
	    close $fh;
	    exit;
	    
	}
	
    }
    
    1;
    
}

sub end {
    # if we are statically rendering the blog, then we have to copy
    # over the entire data tree to the static tree so that it can be
    # served out of there
    if( $blosxom::static_or_dynamic eq "static" ) {
	find( 
	      sub {
		  if( $File::Find::name =~ 
		      m!^$blosxom::datadir(/.*?/)([^/]*?\.[^\.]*?)?$! ) {
		      my @static = stat( "$blosxom::static_dir$1$2" ); 
		      my @data = stat( $File::Find::name );
		      ( ( ! -e "$blosxom::static_dir$1$2" ) ||
			( ( ( $static[9] < $data[9] ) ||
			    ( $static[7] != $data[7] ) ) ) ) &&
			    copy( $File::Find::name, 
				  "$blosxom::static_dir$1$2" );

		  }


	      }, $blosxom::datadir );

    }

    1;

}

sub interpolate {
    return sub {
	package blosxom;
	my $template = shift;
	while( $template =~ 
	       s/(\$\w+(?:::)?\w*)/"defined $1 ? $1 : ''"/gee ) { }
	return $template;
    };  

}


1;

__END__

=head1 NAME

Blosxom Plug-in: binary

=head1 SYNOPSIS

Cause Blosxom to see if the URL requested actually exists on the
filesystem.  If it does, then return the file, and then exit the
script allowing for binary file serves.  If the file does not exist,
then the Bloxsom script will continue noting whether it needs to do a
flavour translation on the data file, etc.

The convienience of this is that when you wish to include an image or
anything besides just the blog entry, you can place the file in the
same directory as your text file, and reference it with a $url$path.

=head1 VERSION

0.0.2

=head1 AUTHOR

Raffi Krikorian <r@bitwaste.com>, http://www.bitwaste.com/

=head1 SEE ALSO

Blosxom Home/Docs/Licensing: http://www.raelity.org/apps/blosxom/

Blosxom Plugin Docs: http://www.raelity.org/apps/blosxom/plugin.shtml

=head1 BUGS

Address bug reports and comments to the Blosxom mailing list 
[http://www.yahoogroups.com/group/blosxom].

=head1 LICENSE

binary Blosxom plugin
Copyright 2003, Raffi Krikorian

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
